--Create schema
CREATE SCHEMA  IF NOT EXISTS UPR_DATA_INTG_META.CONFIG;

-- DLL STATEMENTS FOR CREATING META DATA TABLES
-- QUERY_VIEW_CONFIG TABLE:
-- This table contains information about a view in a database.

CREATE TABLE IF NOT EXISTS UPR_DATA_INTG_META.CONFIG.QUERY_VIEW_CONFIG(
    VIEW_NAME VARCHAR NOT NULL PRIMARY KEY,
    QUERY VARCHAR NOT NULL,
    QUERY_TEMPLATE_NAME VARCHAR NULL,
    PARAMETERS OBJECT NULL,
    VIEW_DESC VARCHAR NULL,
    CREATE_USER VARCHAR NOT NULL,
    CREATE_DATE_TIME TIMESTAMP NOT NULL,
    UPDATE_USER VARCHAR NOT NULL,
    UPDATE_DATE_TIME TIMESTAMP NOT NULL
);

-- QUERY_ORDER_CONFIG TABLE:
-- This table contains configuration information SQL statements and its sequence that
-- result set is derived. This table specifies the view name, execution sequence, query, query template, and
-- parameters for each step in the sequence.

CREATE TABLE IF NOT EXISTS UPR_DATA_INTG_META.CONFIG.QUERY_ORDER_CONFIG(
    VIEW_NAME VARCHAR NOT NULL,
    EXECUTION_SEQUENCE INT NOT NULL ,
    QUERY   VARCHAR NULL ,
    QUERY_TEMPLATE_NAME VARCHAR NULL,
    TEMP_TABLE VARCHAR NOT NULL,
    PARAMETERS OBJECT NULL,
    QUERY_DESC VARCHAR NULL,
    CREATE_USER VARCHAR NOT NULL,
    CREATE_DATE_TIME TIMESTAMP NOT NULL,
    UPDATE_USER VARCHAR NOT NULL,
    UPDATE_DATE_TIME TIMESTAMP NOT NULL,
    PRIMARY KEY (VIEW_NAME,EXECUTION_SEQUENCE),
    FOREIGN KEY (VIEW_NAME) REFERENCES UPR_DATA_INTG_META.CONFIG.QUERY_VIEW_CONFIG (VIEW_NAME)
);

-- QUERY_TEMPLATE_CONFIG TABLE:
-- The table contains information about the query
-- templates that can be used to generate SQL queries

CREATE TABLE IF NOT EXISTS UPR_DATA_INTG_META.CONFIG.QUERY_TEMPLATE_CONFIG(
    QUERY_TEMPLATE_NAME VARCHAR NOT NULL PRIMARY KEY,
    QUERY_TEMPLATE  VARCHAR NOT NULL,
    TEMPLATE_DESC VARCHAR NULL,
    CREATE_USER VARCHAR NOT NULL,
    CREATE_DATE_TIME TIMESTAMP NOT NULL,
    UPDATE_USER VARCHAR NOT NULL,
    UPDATE_DATE_TIME TIMESTAMP NOT NULL
 );

-- WAREHOUSE_ATTR TABLE:
-- This table will store information about virtual warehouse properties.

CREATE TABLE IF NOT EXISTS UPR_DATA_INTG_META.CONFIG.WAREHOUSE_ATTR(
    COMPUTE_WH_NAME VARCHAR NOT NULL PRIMARY KEY,
    COMPUTE_WH_PROPERTIES OBJECT NULL,
    CREATE_USER VARCHAR NOT NULL,
    CREATE_DATE_TIME TIMESTAMP NOT NULL,
    UPDATE_USER VARCHAR NOT NULL,
    UPDATE_DATE_TIME TIMESTAMP NOT NULL
);

-- EMAILT_ATTR TABLE:
-- This table will store information about the email integration
-- and the list of email addresses for the notification.

CREATE TABLE IF NOT EXISTS UPR_DATA_INTG_META.CONFIG.EMAIL_ATTR(
	EMAIL_INTG_NAME VARCHAR NOT NULL PRIMARY KEY,
	EMAIL_ADDR_LIST ARRAY NOT NULL,
    CREATE_USER VARCHAR NOT NULL,
    CREATE_DATE_TIME TIMESTAMP NOT NULL,
    UPDATE_USER VARCHAR NOT NULL,
    UPDATE_DATE_TIME TIMESTAMP NOT NULL
);

-- OBJECT_ATTR TABLE:
-- This table will store information about the pipeline or process name and
-- associated Snowflake object information such as database, schema, table or view,
-- stream name, virtual warehouse to execute the process.

CREATE TABLE IF NOT EXISTS UPR_DATA_INTG_META.CONFIG.OBJECT_ATTR (
    PROCESS_NAME VARCHAR NOT NULL,
    PROCESS_DESC VARCHAR,
    DATABASE_NAME VARCHAR NOT NULL,
    SCHEMA_NAME VARCHAR NOT NULL,
    OBJECT_NAME VARCHAR NOT NULL,
    OBJECT_TYPE VARCHAR NOT NULL,
    COMPUTE_WH_NAME VARCHAR NOT NULL,
    STREAM_NAME VARCHAR,
    STREAM_PROPERTIES OBJECT,
    EMAIL_INTG_NAME VARCHAR,
    TARGET_NAME_LIST OBJECT NOT NULL,
    INCREMENTAL_CAPTURE_FLAG BOOLEAN,
    PRIMARY_TABLE VARCHAR,
    ROLE VARCHAR NULL,
    CREATE_USER VARCHAR NOT NULL,
    CREATE_DATE_TIME TIMESTAMP NOT NULL,
    UPDATE_USER VARCHAR NOT NULL,
    UPDATE_DATE_TIME TIMESTAMP NOT NULL,
    TRANSIENT_STG_TABLE VARCHAR NULL,
    PRIMARY KEY (PROCESS_NAME),
    FOREIGN KEY (COMPUTE_WH_NAME) REFERENCES UPR_DATA_INTG_META.CONFIG.WAREHOUSE_ATTR(COMPUTE_WH_NAME),
    FOREIGN KEY (EMAIL_INTG_NAME) REFERENCES UPR_DATA_INTG_META.CONFIG.EMAIL_ATTR(EMAIL_INTG_NAME),
    FOREIGN KEY (OBJECT_NAME) REFERENCES UPR_DATA_INTG_META.CONFIG.QUERY_VIEW_CONFIG(VIEW_NAME)
);

-- TARGET_ATTR TABLE:
-- This table will store information about the target systems,
-- including target system properties and metadata.

CREATE TABLE IF NOT EXISTS UPR_DATA_INTG_META.CONFIG.TARGET_ATTR(
    PROCESS_NAME VARCHAR NOT NULL,
    TARGET_NAME VARCHAR NULL,
    TARGET_PROPERTIES OBJECT NULL,
    CREATE_USER VARCHAR NOT NULL,
    CREATE_DATE_TIME TIMESTAMP NOT NULL,
    UPDATE_USER VARCHAR NOT NULL,
    UPDATE_DATE_TIME TIMESTAMP NOT NULL,
    PRIMARY KEY (PROCESS_NAME,TARGET_NAME),
    FOREIGN KEY (PROCESS_NAME) REFERENCES UPR_DATA_INTG_META.CONFIG.OBJECT_ATTR (PROCESS_NAME)
);

-- COLUMN_ATTR TABLE:
-- This table will store information about the columns of the target system
-- along with the transformation rules and mapping to the associated Snowflake objects.

CREATE TABLE IF NOT EXISTS UPR_DATA_INTG_META.CONFIG.COLUMN_ATTR (
    PROCESS_NAME VARCHAR NOT NULL,
    TARGET_NAME VARCHAR NOT NULL,
    COLUMN_NAME VARCHAR NOT NULL,
    TRANSFORM_RULE VARCHAR,
    TARGET_COLUMN_NAME VARCHAR,
    OBJECT_CATEGORY VARCHAR,
    LINKED_TO VARCHAR,
    CREATE_USER VARCHAR NOT NULL,
    CREATE_DATE_TIME TIMESTAMP NOT NULL,
    UPDATE_USER VARCHAR NOT NULL,
    UPDATE_DATE_TIME TIMESTAMP NOT NULL,
    PRIMARY KEY (PROCESS_NAME,TARGET_NAME)
);

-- SEQUENCE_NUMBER
CREATE SEQUENCE IF NOT EXISTS UPR_DATA_INTG_META.CONFIG.SEQ START = 1 INCREMENT = 1;

-- DEPLOY_ATTR TABLE:
-- This table contains information related to the deployment of a
-- process in the metadata-driven framework

CREATE TABLE IF NOT EXISTS UPR_DATA_INTG_META.CONFIG.DEPLOY_ATTR (
    SEQUENCE_NUMBER NUMBER(38,0) DEFAULT UPR_DATA_INTG_META.CONFIG.SEQ.NEXTVAL,
    PROCESS_NAME VARCHAR NOT NULL,
    CREATE_WH_FLAG BOOLEAN NOT NULL,
    REPLACE_EXISTING_STREAM BOOLEAN,
    COMMIT_MESSAGE VARCHAR NOT NULL,
    STATUS VARCHAR,
    LOG_MESSAGE VARCHAR,
    INITIATION_DATE_TIME TIMESTAMP_NTZ(9) NOT NULL,
    COMPLETION_DATE_TIME TIMESTAMP_NTZ(9),
    CREATE_USER VARCHAR NULL,
    UPDATE_USER VARCHAR NULL
 );

-- PIPELINE TABLE:
-- This table will store the generate dataflow pipeline in JSON format and
-- it will be leveraged by data processing component.

CREATE TABLE IF NOT EXISTS UPR_DATA_INTG_META.CONFIG.PIPELINE(
    PROCESS_NAME VARCHAR NOT NULL,
    PIPELINE_CONFIG OBJECT NOT NULL,
    RUNTIME_PARAMS OBJECT NULL,
    COMMENT_TEXT VARCHAR NULL,
    CREATE_USER VARCHAR NOT NULL,
    CREATE_DATE_TIME TIMESTAMP NOT NULL,
    UPDATE_USER VARCHAR NOT NULL,
    UPDATE_DATE_TIME TIMESTAMP NOT NULL,
    PRIMARY KEY (PROCESS_NAME),
    FOREIGN KEY (PROCESS_NAME) REFERENCES UPR_DATA_INTG_META.CONFIG.OBJECT_ATTR (PROCESS_NAME)
);

-- JOB_STATUS_HISTORY TABLE:
-- This table will store information about the
-- run history of a process in a pipeline.

CREATE TABLE IF NOT EXISTS UPR_DATA_INTG_META.CONFIG.JOB_STATUS_HISTORY (
	PROCESS_NAME VARCHAR NOT NULL,
	PIPELINE_CONFIG OBJECT NOT NULL,
	RUN_ID NUMBER(38,0) NOT NULL,
	RESTART_RUN_ID NUMBER(38,0),
	START_DATE_TIME TIMESTAMP NOT NULL,
	END_DATE_TIME TIMESTAMP,
	LOG_MESSAGE VARCHAR,
	STATUS VARCHAR NOT NULL,
	SUCCESSFUL_RECORD_COUNT NUMBER(38,0),
	FAILED_RECORD_COUNT NUMBER(38,0),
	FAILURE_REASON VARCHAR,
	CREATE_USER VARCHAR NOT NULL,
	UPDATE_USER VARCHAR NOT NULL,
	PRIMARY KEY (PROCESS_NAME, RUN_ID)
);

-- CREATE STREAM
CREATE STREAM IF NOT EXISTS UPR_DATA_INTG_META.CONFIG.DEPLOY_ATTR_STREAM ON TABLE UPR_DATA_INTG_META.CONFIG.DEPLOY_ATTR APPEND_ONLY = TRUE;


-- CREATE PROCEDURE
CREATE OR REPLACE PROCEDURE UPR_DATA_INTG_META.CONFIG.METADATA_GENERATION_PROC("LOG_LEVEL" VARCHAR)
RETURNS OBJECT
LANGUAGE PYTHON
RUNTIME_VERSION = '3.8'
PACKAGES = ('snowflake-snowpark-python','colorlog')
HANDLER = 'metadata_process.run_metadata_process'
IMPORTS = ('@UPR_DATA_INTG_META.CONFIG.METADATA_SCRIPTS_STAGE/data_flow_utils.py','@UPR_DATA_INTG_META.CONFIG.METADATA_SCRIPTS_STAGE/dynamic_view_query_generation.py','@UPR_DATA_INTG_META.CONFIG.METADATA_SCRIPTS_STAGE/meta_logr.py','@UPR_DATA_INTG_META.CONFIG.METADATA_SCRIPTS_STAGE/metadata_process.py')
EXECUTE AS CALLER;


-- CREATE TASK
CREATE OR REPLACE TASK UPR_DATA_INTG_META.CONFIG.METADATA_GENERATION_TASK
WAREHOUSE=CDP_DEVELOPER_WH
SCHEDULE='30 MINUTES'
WHEN SYSTEM$STREAM_HAS_DATA('UPR_DATA_INTG_META.CONFIG.DEPLOY_ATTR_STREAM')
AS
CALL UPR_DATA_INTG_META.CONFIG.METADATA_GENERATION_PROC('INFO');